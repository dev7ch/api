# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#

workflows:
  version: 2
  build-deploy:
    jobs:
    - build
    - deploy:
        requires:
        - build
        filters:
          branches:
            only: circle-ci-test
version: 2
jobs:
  build:
    docker:
    # Specify the version you desire here
    - image: circleci/php:7.1-node-browsers
      environment:
        MYSQL_HOST: 127.0.0.1
        MYSQL_USER: root
        MYSQL_ALLOW_EMPTY_ROOT_PASSWORD: true
        MYSQL_ALLOW_EMPTY_PASSWORD: true
        MYSQL_ROOT_PASSWORD: ''
        MYSQL_DATABASE: directus_test

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # Using the RAM variation mitigates I/O contention
    # for database intensive operations.
    # - image: circleci/mysql:5.7-ram
    #
    # - image: redis:2.8.19
    - image: mysql:5.7
      command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin --innodb-large-prefix=true --innodb-file-format=Barracuda
      environment:
        MYSQL_USER: root
        MYSQL_ALLOW_EMPTY_PASSWORD: true

    steps:
      - checkout
      - run: sudo apt install -y libpng-dev
      - run: sudo apt install -y mysql-client
      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo apt install zlib1g-dev
      - run: sudo docker-php-ext-install mbstring zip gd exif pdo pdo_mysql fileinfo

      # Download and cache dependencies
      - restore_cache:
          keys:
          # "composer.lock" can be used if it is committed to the repo
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
          - ./vendor
      - restore_cache:
          keys:
          - node-v1-{{ checksum "package.json" }}
          - node-v1-
      - run:
          name: Install Extensions and Build them ...
          command: cd extensions/ && yarn install && yarn build && cd ..
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
          - node_modules

      # prepare the database

      - run: cp phpunit.xml.dist phpunit.xml
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s
      - run: mysql -uroot -e "create database directus_test;"
      - run: mysql -uroot directus_test < tests/db.sql
      - run: composer install
      - run: bin/directus install:config -h "127.0.0.1" -P 3306 -n "directus_test" -u "root" -e "admin@example.com"
      - run: bin/directus install:database
      - run: bin/directus install:install -e "admin@example.com" -p "password" -t "directus_test" -T "TOKEN"

      #- run: touch storage/testing.sqlite
      #- run: php artisan migrate --env=testing --database=sqlite_testing --force

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      # - run: ./vendor/bin/codecept build
      # - run: ./vendor/bin/codecept run

    deploy:
      steps:
        - checkout
        - run:
            name: Deploy circle-ci-test to Heroku
            command: |
              git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git circle-ci-test
